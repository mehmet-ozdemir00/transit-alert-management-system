AWSTemplateFormatVersion: '2010-09-09'
Description: An AWS Lambda application that processes public transit alerts.

Parameters:
  ExistingCognitoUserPoolId:
    Type: String
    Description: The ID of the existing Cognito User Pool

  ExistingCognitoUserPoolClientId:
    Type: String
    Description: The App Client ID of the existing Cognito User Pool

  ExistingCognitoUserPoolArn:
    Type: String
    Description: The ARN of the existing Cognito User Pool


Resources:

# LambdaExecutionRole grants necessary permissions for the Lambda function to interact with AWS services.
# It allows Lambda to access DynamoDB for CRUD operations on the TransitAlertData table.
# Enables Lambda to invoke API Gateway and publish notifications via SNS.
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:DeleteItem
                  - dynamodb:UpdateItem
                Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/TransportDataStream
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - execute-api:Invoke
                Resource: "*"
              - Effect: Allow
                Action:
                  - sns:Publish
                  - sns:Subscribe
                  - sns:Unsubscribe
                  - sns:ListSubscriptions
                  - sns:GetSubscriptionAttributes
                  - sns:ListSubscriptionsByTopic
                Resource: !Ref TransitAlertTopic

  TransitAlertTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: TransitAlertTopic

# MyApiGateway creates a REST API for handling public transit alert operations.
# Defines the name and description for the API.
# This API will serve as the entry point for all client requests (subscribe, update, unsubscribe, etc.).
  MyApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: "TransitAlertServiceAPI"
      Description: "API for handling public transit alert operations"

# MyCognitoAuthorizer configures Cognito as the authorization mechanism for the API.
# Uses the Cognito User Pool to authenticate users based on the Authorization header in API requests.
# Ensures that only authenticated users with a valid token can access the API methods.
# Links the authorizer to the API Gateway defined above.
  MyCognitoAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: "CognitoAuthorizer"
      Type: COGNITO_USER_POOLS
      IdentitySource: "method.request.header.Authorization"
      RestApiId: !Ref MyApiGateway
      ProviderARNs:
        - !Ref ExistingCognitoUserPoolArn

# Lambda function to process transit alerts and subscriptions using Python 3.11.
# Links function to IAM role for required permissions and environment variables.
# Specifies deployment package location (S3 bucket and key).
  MyTransitLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: LambdaHandlerFunction
      Description: Handles real-time public transit alerts and subscriptions
      Handler: lambda_handler.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.11
      MemorySize: 512
      Timeout: 240
      Environment:
        Variables:
          ENV: dev
          DYNAMODB_TABLE_NAME: TransportDataStream
          COGNITO_USER_POOL_ID: !Ref ExistingCognitoUserPoolId
          COGNITO_USER_POOL_CLIENT_ID: !Ref ExistingCognitoUserPoolClientId
          COGNITO_REGION: !Ref AWS::Region
          SNS_TOPIC_ARN: !Ref TransitAlertTopic
          MTA_API_KEY: cf61841d-d775-4832-b96b-2e24ae75c7fb
          DELAY_THRESHOLD_MINUTES: "4"
          VEHICLE_DELAY_THRESHOLD: "5"
          MAX_SUBSCRIPTIONS: "5"
          MAX_RETRIES: "3"
          RETRY_DELAY: "5"
      Code:
        S3Bucket: transit-alert-management-system-artifacts
        S3Key: lambda_deployment.zip

  # API Resources & Methods
  # Subscribe Resources
  SubscribeResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref MyApiGateway
      ParentId: !GetAtt MyApiGateway.RootResourceId
      PathPart: "subscribe"

  SubscribeMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref MyCognitoAuthorizer
      HttpMethod: POST
      ResourceId: !Ref SubscribeResource
      RestApiId: !Ref MyApiGateway
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyTransitLambdaFunction.Arn}/invocations"

  SubscribeOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      ResourceId: !Ref SubscribeResource
      RestApiId: !Ref MyApiGateway
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

# Update Resources
  UpdateResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref MyApiGateway
      ParentId: !GetAtt MyApiGateway.RootResourceId
      PathPart: "update"

  UpdateMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref MyCognitoAuthorizer
      HttpMethod: PUT
      ResourceId: !Ref UpdateResource
      RestApiId: !Ref MyApiGateway
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyTransitLambdaFunction.Arn}/invocations"

  UpdateOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      ResourceId: !Ref UpdateResource
      RestApiId: !Ref MyApiGateway
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'PUT,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

# Unsubscribe Resource
  UnsubscribeResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref MyApiGateway
      ParentId: !GetAtt MyApiGateway.RootResourceId
      PathPart: "unsubscribe"

  UnsubscribeMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref MyCognitoAuthorizer
      HttpMethod: DELETE
      ResourceId: !Ref UnsubscribeResource
      RestApiId: !Ref MyApiGateway
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyTransitLambdaFunction.Arn}/invocations"

  UnsubscribeOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      ResourceId: !Ref UnsubscribeResource
      RestApiId: !Ref MyApiGateway
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

# Subscription Resource
  SubscriptionResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref MyApiGateway
      ParentId: !GetAtt MyApiGateway.RootResourceId
      PathPart: "subscription"

  SubscriptionMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref MyCognitoAuthorizer
      HttpMethod: DELETE
      ResourceId: !Ref SubscriptionResource
      RestApiId: !Ref MyApiGateway
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyTransitLambdaFunction.Arn}/invocations"
  
  SubscriptionOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      ResourceId: !Ref SubscriptionResource
      RestApiId: !Ref MyApiGateway
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

# Status Resource
  StatusResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref MyApiGateway
      ParentId: !GetAtt MyApiGateway.RootResourceId
      PathPart: "status"

  StatusMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref MyCognitoAuthorizer
      HttpMethod: GET
      ResourceId: !Ref StatusResource
      RestApiId: !Ref MyApiGateway
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyTransitLambdaFunction.Arn}/invocations"

  StatusOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      ResourceId: !Ref StatusResource
      RestApiId: !Ref MyApiGateway
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

# Prediction Resource
  PredictionResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref MyApiGateway
      ParentId: !GetAtt MyApiGateway.RootResourceId
      PathPart: "prediction"
  
  PredictionMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref MyCognitoAuthorizer
      HttpMethod: GET
      ResourceId: !Ref PredictionResource
      RestApiId: !Ref MyApiGateway
      Integration:
        IntegrationHttpMethod: GET
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyTransitLambdaFunction.Arn}/invocations"
  
  PredictionOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      ResourceId: !Ref PredictionResource
      RestApiId: !Ref MyApiGateway
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

# Delay Resource
  DelayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref MyApiGateway
      ParentId: !GetAtt MyApiGateway.RootResourceId
      PathPart: "delay"
  
  DelayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref MyCognitoAuthorizer
      HttpMethod: GET
      ResourceId: !Ref DelayResource
      RestApiId: !Ref MyApiGateway
      Integration:
        IntegrationHttpMethod: GET
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyTransitLambdaFunction.Arn}/invocations"
  
  DelayOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      ResourceId: !Ref DelayResource
      RestApiId: !Ref MyApiGateway  
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

# Cancelled Resource
  CancelledResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref MyApiGateway
      ParentId: !GetAtt MyApiGateway.RootResourceId
      PathPart: "cancelled"
  
  CancelledMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref MyCognitoAuthorizer
      HttpMethod: GET
      ResourceId: !Ref CancelledResource
      RestApiId: !Ref MyApiGateway
      Integration:
        IntegrationHttpMethod: GET
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyTransitLambdaFunction.Arn}/invocations"
  
  CancelledOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      ResourceId: !Ref CancelledResource
      RestApiId: !Ref MyApiGateway  
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

# API Gateway Deployment
  MyApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - SubscribeMethod
      - UpdateMethod
      - UnsubscribeMethod
      - StatusMethod
      - SubscribeOptionsMethod
      - UpdateOptionsMethod
      - UnsubscribeOptionsMethod
      - StatusOptionsMethod
      - PredictionMethod
      - PredictionOptionsMethod
      - DelayMethod
      - DelayOptionsMethod
      - CancelledMethod
      - CancelledOptionsMethod
    Properties:
      RestApiId: !Ref MyApiGateway
      StageName: dev

# Grants API Gateway permission to invoke the Lambda function.
# The permission is restricted to requests from the specified API Gateway.
# Applied for the 'dev' stage of the API.
# This ensures that only the API Gateway can trigger the Lambda function.
  ApiGatewayInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref MyTransitLambdaFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MyApiGateway}/dev/*"

# Outputs the Lambda function name, API Gateway URL, and Cognito User Pool details.
Outputs:
  LambdaFunctionName:
    Description: "Lambda function name"
    Value: !Ref MyTransitLambdaFunction

  ApiGatewayUrl:
    Description: "Base URL for Transit Alert Service API"
    Value: !Sub "https://${MyApiGateway}.execute-api.${AWS::Region}.amazonaws.com/dev"

  CognitoUserPoolId:
    Description: "Cognito User Pool ID"
    Value: !Ref ExistingCognitoUserPoolId

  CognitoUserPoolClientId:
    Description: "Cognito User Pool Client ID"
    Value: !Ref ExistingCognitoUserPoolClientId